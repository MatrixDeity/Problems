/**
ЗАДАНИЕ:
  Геннадий - один из лучших детских стоматологов Берляндии. Сегодня к нему на прием записались n детишек, которые выстроились в очередь перед его кабинетом.
  Все дети любят громко плакать на приеме у зубного врача. Перенумеруем детишек целыми числами от 1 до n в порядке очереди. Каждый ребенок характеризуется
  величиной решимости pi. Дети по очереди один за другим заходят в кабинет; каждый раз к врачу заходит первый ребенок из очереди.
  Пока Геннадий лечит зубы i-му ребенку, ребенок плачет с громкостью vi. При этом решимость первого ребенка в очереди уменьшается на величину vi,
  второго - на величину vi-1, и так далее. Дети, находящиеся в очереди после vi-го ребенка, практически не слышат плача, поэтому их решимость остается
  неизменной.
  Если в какой-то момент времени решимость j-го ребенка станет меньше нуля, то он начинает плакать с громкостью dj и, покидая очередь, бежит к выходу,
  не заходя в кабинет врача. При этом решимости всех детей, находящихся после j-го в очереди, уменьшатся на величину dj.
  Все эти события происходят мгновенно, одно за другим в каком-то порядке. Одни крики могут стать причиной других, провоцируя "цепную реакцию". Как только
  в коридоре становится тихо, в кабинет заходит ребенок, оказавшийся в очереди первым.
  Помогите стоматологу Геннадию определить номера детишек, которым он вылечит зубки. Ответ выведите в хронологическом порядке.

ВВОД:
  В первой строке входных данных находится целое положительное число n (1 <= n <= 4000) - количество детишек в очереди.
  В следующих n строках находятся по три целых числа vi, di, pi (1 <= vi, di, pi <= 10^6) - громкость плача в кабинете, громкость плача в коридоре и
  решимость i-го ребенка.

ВЫВОД:
  В первой строке выведите число k - количество детишек, которым Геннадий вылечит зубки.
  Во второй строке выведите k целых чисел - номера детишек, которые дождутся своей очереди, в порядке возрастания.
*/

#include <stdio.h>
#include <list>

using namespace std;

typedef long long s64;

const int N = 4000;

struct Child
{
    s64 v, d, p;
};

int main()
{
    int n;
    Child arr[N];
    list<int> ans;

    scanf("%i", &n);
    for (int i = 0; i < n; ++i)
        scanf("%I64i%I64i%I64i", &arr[i].v, &arr[i].d, &arr[i].p);

    for (int i = 0; i < n; ++i)
    {
        if (arr[i].p >= 0)
        {
            s64 v = arr[i].v;
            s64 d = 0;
            for (int j = i+1; j < n; ++j)
            {
                if (arr[j].p >= 0)
                {
                    arr[j].p -= (v > 0 ? v : 0) + d;
                    if (arr[j].p < 0)
                        d += arr[j].d;
                    --v;
                }

            }
            ans.push_back(i+1);
        }
    }

    printf("%i\n", ans.size());
    for (s64 x : ans)
        printf("%I64i ", x);

    return 0;
}
