/**
ЗАДАНИЕ:
  В некоторых клетках квадрата N*N живут микроорганизмы (не более одного в одной клетке).
  Каждую секунду происходит следующее:
  - все микроорганизмы, у которых менее 2-х соседей, умирают от скуки (соседями называются микроорганизмы, живущие в клетках, имеющих общую сторону или
    вершину);
  - все микроорганизмы, у которых более 3-х соседей, умирают от перенаселенности;
  - на всех пустых клетках, у которых ровно в трех соседних клетках жили микроорганизмы, появляются новые микроорганизмы.
  Все изменения происходят одновременно, то есть для каждой клетки сначала выясняется ее судьба, а затем происходят изменения сразу во всех клетках.
  Требуется по данной конфигурации определить, во что она превратится через T секунд.

ВВОД:
  В первой строке вводятся два натуральных числа – N (1 <= N <= 10) и T (1 <= T <= 100). Далее записано N строчек по N чисел, описывающих начальную
  конфигурацию (0 – пустая клетка, 1 – микроорганизм). Числа в строках разделены пробелами.

ВЫВОД:
  Требуется вывести N строк по N чисел - описание конфигурации через T секунд (в том же формате, как и во входных данных).

*/

#include <iostream>

using namespace std;

const int N = 10;

bool field[N][N][2];
bool flag = false;
int n, t;

bool isSurvived(int x, int y)
{
    int count(0);
    for (int i = (x > 0 ? x-1 : x); i < (x < n-1 ? x+2 : n); ++i)
        for (int j = (y > 0 ? y-1 : y); j < (y < n-1 ? y+2 : n); ++j)
            if (i != x || j != y)
                if (field[i][j][!flag])
                    ++count;
    return count == 3 || (count == 2 && field[x][y][!flag]);
}

int main()
{
    cin >> n >> t;
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            cin >> field[i][j][flag];

    for (int i = 0; i < t; ++i)
    {
        flag = !flag;
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < n; ++j)
                field[i][j][flag] = isSurvived(i, j);
    }

    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < n; ++j)
            cout << field[i][j][flag] << ' ';
        cout << endl;
    }
    return 0;
}
